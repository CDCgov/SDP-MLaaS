install.packages("rnn")
install.packages("rBayesianOptimization")
install.packages("gglasso")
install_keras()
library(keras)
install_keras()
library(keras)
install_keras()
install_keras()
install_keras(conda = "C:/TEMP/anaconda/envs/test/Scripts/conda.exe")
reticulate::py_config()
install_keras(method = "conda")
library(keras)
install_keras()
library(keras)
maxlen <- 100
training_samples <- 830064
validation_samples <- 427609
tokenizer <- text_tokenizer(num_words = maxlen) %>%
fit_text_tokenizer(ccs)
sequences <- texts_to_sequences(tokenizer, ccs)
setwd("/Users/awhittaker/Desktop/CDC MaaS")
library(tidyverse)
cdata<-read_csv("Sample.csv")
install.packages("DMwR")
es <- 0.15 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 3  # Number of effect sizes
hg <- 3  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.15 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 3  # Number of effect sizes
hg <- 1  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.15 # Enter your summary effect size
as <- 200  # Average per number per group
mk <- 3  # Number of effect sizes
hg <- 3  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.15 # Enter your summary effect size
as <- 200  # Average per number per group
mk <- 3  # Number of effect sizes
hg <- 1  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.15 # Enter your summary effect size
as <- 200  # Average per number per group
mk <- 15  # Number of effect sizes
hg <- 1  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.15 # Enter your summary effect size
as <- 200  # Average per number per group
mk <- 20  # Number of effect sizes
hg <- 1  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.5 # Enter your summary effect size
as <- 200  # Average per number per group
mk <- 20  # Number of effect sizes
hg <- 1  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1  # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 3 # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1 # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1 # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1 # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1 # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1 # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1 # Heterogeniety (".33" for small, "1" for moderate, & "3" for large)
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
es <- 0.2 # Enter your summary effect size
as <- 50  # Average per number per group
mk <- 15 # Number of effect sizes
hg <- 1
eq1 <- ((as+as)/((as)*(as))) + ((es^2)/(2*(as+as)))
eq2 <- hg*(eq1)
eq3 <- eq2+eq1
eq4 <- eq3/mk
getwd()
setwd("C:/Users/awhittaker/Desktop")
library(devtools)
install("ss")
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
cdata <-read_csv("Sample.csv")
cdata <-as_vector(cdata)
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
cdata <- cdata[1:1000]
sample_data <- process(x = cdata)
predict_model(data = sample_data, model = model)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
cdata <-read_csv("Sample.csv")
cdata <-as_vector(cdata)
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
sample_data <- process(x = cdata)
predict_model(data = sample_data, model = model)
predict_model(data = sample_data, model = model)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
predict_model(data = sample_data, model = model)
prediction_df <- predict_model(data = sample_data, model = model)
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
getwd()
cdata <-read_csv("Sample.csv")
cdata <-as_vector(cdata)
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
predict_model(data = sample_data, model = model)
prediction_df <- predict_model(data = sample_data, model = model)
write.csv(prediction_df, "prediction_df.csv")
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
cdata <-read_csv("Sample.csv")
cdata <-as_vector(cdata)
cdata <-cdata[1:1000]
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
sample_data <- process(x = cdata)
prediction_df <- predict_model(data = sample_data, model = model)
View(prediction_df)
predict_model(data = sample_data, model = model)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
cdata <-read_csv("Sample.csv")
cdata <-as_vector(cdata)
cdata <-cdata[1:1000]
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
sample_data <- process(x = cdata)
predict_model(data = sample_data, model = model)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
cdata <- read_csv("Sample.csv")
cdata <- as_vector(cdata)
cdata <- cdata[1:1000]
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
sample_data <- process(x = cdata)
predict_model(data = sample_data, model = model)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
cdata <- read_csv("Sample.csv")
cdata <- as_vector(cdata)
cdata <- cdata[1:1000]
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
sample_data <- process(x = cdata)
View(sample_data)
predict_model(data = sample_data, model = model)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(data)) %>%
as.vector()
predict_thresh <- function(data, model) {
#load_model_hdf5(model)
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(data)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model, x = as.matrix(data)) %>%
as.vector()
threshold <- .1363132
estimates_keras_tbl <- tibble(
truth      = as.factor(labels) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
recoding based on threshold
levels(estimates_keras_tbl$estimate) <- c(levels(estimates_keras_tbl$estimate), 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob >= threshold] <- 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob <= threshold] <- 'no')
#Final Prediction
predictions <- yhat_keras_class_vec
return(predictions)
}
predict_thresh <- function(data, model) {
#load_model_hdf5(model)
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(data)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model, x = as.matrix(data)) %>%
as.vector()
threshold <- .1363132
estimates_keras_tbl <- tibble(
truth      = as.factor(labels) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
recoding based on threshold
levels(estimates_keras_tbl$estimate) <- c(levels(estimates_keras_tbl$estimate), 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob >= threshold] <- 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob <= threshold] <- 'no')
#Final Prediction
predictions <- yhat_keras_class_vec
return(predictions)
}
cdata <- read_csv("Sample.csv")
cdata <- as_vector(cdata)
cdata <- cdata[1:1000]
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
library(readr)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
predict_thresh <- function(data, model) {
#load_model_hdf5(model)
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(data)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model, x = as.matrix(data)) %>%
as.vector()
threshold <- .1363132
estimates_keras_tbl <- tibble(
truth      = as.factor(labels) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
#recoding based on threshold
levels(estimates_keras_tbl$estimate) <- c(levels(estimates_keras_tbl$estimate), 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob >= threshold] <- 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob <= threshold] <- 'no')
#Final Prediction
predictions <- yhat_keras_class_vec
return(predictions)
}
predict_thresh(data = sample_data, model = model)
cdata <- read_csv("Sample.csv")
cdata <- as_vector(cdata)
cdata <- cdata[1:1000]
sample_data <- process(x = cdata)
test <- predict_thresh(data = sample_data, model = model)
predict_thresh <- function(data, model) {
#load_model_hdf5(model)
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(data)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model, x = as.matrix(data)) %>%
as.vector()
threshold <- .1363132
estimates_keras_tbl <- tibble(
truth      = as.factor(labels) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
#recoding based on threshold
levels(estimates_keras_tbl$estimate) <- c(levels(estimates_keras_tbl$estimate), 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob >= threshold] <- 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob <= threshold] <- 'no')
#Final Prediction
predictions <- yhat_keras_class_vec
return(predictions)
}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(keras)
library(yardstick)
library(forcats)
library(ss)
cdata <- read_csv("Sample.csv")
cdata <- as_vector(cdata)
cdata <- cdata[1:1000]
tokenizer <-load_text_tokenizer("tokenizer2")
model <- load_model_hdf5("nausea_model.h5")
sample_data <- process(x = cdata)
test <- predict_thresh(data = sample_data, model = model)
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(sample_data)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model, x = as.matrix(sample_data)) %>%
as.vector()
threshold <- .1363132
estimates_keras_tbl <- tibble(
truth      = as.factor(labels) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
levels(estimates_keras_tbl$estimate) <- c(levels(estimates_keras_tbl$estimate), 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob >= threshold] <- 'yes')
estimates_keras_tbl <- within(estimates_keras_tbl, estimate[class_prob <= threshold] <- 'no')
threshold <- .1363132
estimates_keras_tbl <- tibble(
truth      = as.factor(labels) %>% fct_recode(yes = "1", no = "0"),
estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = "1", no = "0"),
class_prob = yhat_keras_prob_vec
)
threshold <- .1363132
temp <- cbind(yhat_keras_class_vec, yhat_keras_prob_vec)
View(temp)
class(temp)
temp$yhat_keras_class_vec[df$yhat_keras_prob_vec > threshold] <- 1
temp <- data.frame(cbind(yhat_keras_class_vec, yhat_keras_prob_vec))
temp$yhat_keras_class_vec[df$yhat_keras_prob_vec > threshold] <- 1
temp$yhat_keras_class_vec[temp$yhat_keras_prob_vec > threshold] <- 1
predict_thresh <- function(data, model) {
#load_model_hdf5(model)
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(sample_data)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model, x = as.matrix(sample_data)) %>%
as.vector()
threshold <- .1363132
temp <- data.frame(cbind(yhat_keras_class_vec, yhat_keras_prob_vec))
temp$yhat_keras_class_vec[temp$yhat_keras_prob_vec > threshold] <- 1
#Final Prediction
return(temp)
}
predict_thresh(data = sample_data, model = model)
predict_thresh <- function(data, model) {
#load_model_hdf5(model)
# Predicted Class
yhat_keras_class_vec <- predict_classes(object = model, x = as.matrix(data)) %>%
as.vector()
# Predicted Class Probability
yhat_keras_prob_vec  <- predict_proba(object = model, x = as.matrix(data)) %>%
as.vector()
threshold <- .1363132
temp <- data.frame(cbind(yhat_keras_class_vec, yhat_keras_prob_vec))
temp$yhat_keras_class_vec[temp$yhat_keras_prob_vec > threshold] <- 1
#Final Prediction
return(temp)
}
predict_thresh(data = sample_data, model = model)
library(devtools)
library(roxygen2)
getwd()
setwd( "C:/Users/awhittaker/Desktop/ss")
document()
